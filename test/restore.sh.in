#!/bin/sh
# restore.sh: tests rmw's restore features
#
# This script can be used to demonstrate the restore features of rmw to
# new users, and to test for bugs when making code changes
#

. @abs_builddir@/VARS

if [ -e COMMON ]; then
  . ./COMMON
else
  . @abs_top_srcdir@/test/COMMON
fi

echo $SEPARATOR
echo "Initialize"
$RMW_TEST_CMD_STRING
test_result $?

echo $SEPARATOR
echo " Creating some files for testing..."
cd $RMWTEST_HOME
../create-some-files.sh
test_result $?

echo $SEPARATOR
echo "ReMove files and then restore them by using -u"
set -x
$RMW_TEST_CMD_STRING $RMWTEST_HOME/somefiles/*
$RMW_TEST_CMD_STRING -u
test_result $?

echo $SEPARATOR
echo "Show result when no undo file exists..."
$RMW_TEST_CMD_STRING -u
test_result_want_fail $?

echo $SEPARATOR
echo "restore using wildcard pattern, but be in the trash directory"
set -x
$RMW_TEST_CMD_STRING $RMWTEST_HOME/somefiles/topdir
cd $RMWTEST_HOME/.local/share/Waste/files
$RMW_TEST_CMD_STRING -z topd*
test_result $?

echo $SEPARATOR
echo "Try restoring a file that doesn't exist"
$RMW_TEST_CMD_STRING -z nonexistent_fil*
test_result_want_fail $?

echo $SEPARATOR
echo "What happens when trying to ReMove file inside dir with no write permissions..."
set -x
mkdir $RMWTEST_HOME/no_write_perms
touch $RMWTEST_HOME/no_write_perms/test.tmp
chmod -R -w $RMWTEST_HOME/no_write_perms
$RMW_TEST_CMD_STRING $RMWTEST_HOME/no_write_perms
test_result_want_fail $?

# change permissions back to writable so the dir gets removed before the
# next test (done in COMMON)
chmod +w -R $RMWTEST_HOME/no_write_perms

echo $SEPARATOR
echo "restore tests passed"

exit 0
