name: C/C++ CI
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches: master
    paths:
    - '**'
    - '!**.yml'
    - '!**.md'
    - '!docker/**'
    - '**/c-cpp.yml'
  pull_request:
    branches: master
    paths:
    - '**'
    - '!**.yml'
    - '!**.md'
    - '!docker/**'
    - '**/c-cpp.yml'

env:
  TERM: xterm

jobs:
  ubuntu-focal:
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        os: [ubuntu-20.04]
        compiler: [gcc-9, gcc-11, clang-10]
    runs-on: ${{ matrix.os }}
    env:
      MATRIX_OS: ${{ matrix.os }}
      MATRIX_ARCH: ${{ matrix.arch }}
      CC: ${{ matrix.compiler }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependencies
      run: |
        if [ -z "${CC##*$clang*}" ]; then
          curl -L https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
          sudo apt-get update -qq
          sudo apt-get install -y $CC
        else
          if  [ "$CC" = "gcc-11"]; then
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157;
            sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
          fi
          sudo apt-get update -qq;
          sudo apt-get install -y $CC
        fi
    - run: sh ./.github/scripts/all_tests.sh

  Jammy:
    strategy:
      fail-fast: false
    runs-on: ubuntu-22.04
    env:
      CC: 'gcc-12'
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build
      run: sh ./.github/scripts/all_tests.sh

  slackware:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: andy5995/slackware-build-essential:15.0
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build and test with meson
      run: |
        meson setup _build
        cd _build
        meson compile
        meson test

  macos:
    runs-on: macos-latest
    env:
      PKG_CONFIG_PATH: "/usr/local/opt/ncurses/lib/pkgconfig:$PKG_CONFIG_PATH"
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - run: |
        pip3 install meson ninja
        brew install ncurses
    - run: |
        meson setup builddir
        ninja -v -C builddir
        ninja -v -C builddir dist

  freebsd:
    runs-on: macos-12
    name: FreeBSD Test
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Test
      id: test
      uses: vmactions/freebsd-vm@v0
      with:
        usesh: true
        prepare:  |
          pkg install -y meson ninja gettext pkgconf
        run: |
          meson setup builddir
          ninja -v -C builddir
          ninja -C builddir test

  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # Override automatic language detection by changing the below list
        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
        language: ['cpp']
        # Learn more...
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # We must fetch at least the immediate parents so that if this is a
        # pull request then we can checkout the head.
        fetch-depth: 2
        submodules: true
    - name: Install dependencies
      run: |
        sudo apt-get install -y gettext
        sudo python3 -m pip install meson ninja

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
        meson setup -Db_sanitize=none builddir
        cd builddir
        ninja test

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

