language: c
cache: ccache
matrix:
# gcc
  include:
    - os: linux
      dist: xenial
      compiler: gcc # defaults to version 5 on xenial
      addons:
        apt:
          packages:
            - valgrind
      env:
        - DISTCHECK_ONLY="true" COMPILER="default"
        - CONFIGURE_OPTS="--enable-release"
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - secure: "W4b3+2QXHRWddzR0MP/8mpppepuHj1SsFXc/u+wjJWiQ59L2L2R+aGJ2e7wh3M26UaxxRdFZr0mcPEUo/EOn2as0oloAeRPt2lS8az3Doih/Wt1xqIAWNPOsY4ljtaValtZFGVOwcQZYePh314pAagQY/e+NoRWBIJ/Tl48AtcOJov4shq0ichp/8/4+DuAprpnRsSYSKPmMI6cYI0EWt0VKgzx+nOLYuORKetOEbqsRm55LIr5vZk5IueE45bqdlyGkwtPvmVg0XNGbLZxiIycZ6V/zvw9UxQy7DlqUjuZT4R5HJ/wIcvgVR9JprBN7Aza9NvTRupghGujoubb3Io6Xl71plpcAqyAjtpzre6IxxfHc7UEjIexK3tOgTBZff3AuR6+AEvVt9VZYh+TLLjx3Vmg4ek5ETvXeYRg4gbkf01obV019MdO1aNJgcOqOHExFuQ3VnxTo1tCDsT4z6pzRly2EXxOxzDWUGJ+c60tsmQzdr9SiQJgvecfxSfO4RCj2sgQ+2zNYWQ/Rk8HAcf+n7Sze/KTJ6DZltSGP6RA6mHbCNj4VQ63JmGhciSIvNaKbwAUaIlNQWFHFtctDFNwVhikEZNLgC+3o0+9apWBvmuHb5is4SlPSlsvYrUOzIZEApUNFlZh5+bNfXL7o1s5qWIvk56rhkYQ9dEWBzzk="
      before_install:
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      addons:
        coverity_scan:
          project:
            name: "theimpossibleastronaut/rmw"
            description: "Console recycle bin written in C"
          notification_email: "andy400-dev@yahoo.com"
          build_command_prepend: "./configure"
          build_command: "make"
          branch_pattern: coverity_scan
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - MATRIX_EVAL="CC=gcc-6 && CXX=g++-6"
        - USE_VALGRIND=true
    - os: linux
      dist: bionic
      compiler: gcc # defaults to version 7 on bionic
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
        - CONFIGURE_OPTS="--enable-release"
        - RMW_FAKE_MEDIA_ROOT=true
    - os: linux
      dist: bionic
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
        - RMW_FAKE_MEDIA_ROOT=true
        - USE_VALGRIND=true
    - os: linux
      dist: bionic
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10"
        - CONFIGURE_OPTS="--enable-release"
    - os: linux
      dist: focal
      compiler: gcc

# clang
    - os: linux
      dist: xenial
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
          packages:
            - clang-5.0
      env: MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"
    - os: linux
      dist: xenial
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-6.0
          packages:
            - clang-6.0
      env:
        - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
        - CONFIGURE_OPTS="--enable-release"
    - os: linux
      dist: xenial
      compiler: clang
    - os: linux
      dist: focal
      compiler: clang

# purging test fails on osx
# See https://github.com/theimpossibleastronaut/rmw/issues/283 for details
# osx
    - os: osx
      osx_image: xcode11.2
      env: XCODE="true"
    - os: osx
      osx_image: xcode11.6
      env: XCODE="true"
    - os: osx
      osx_image: xcode12.2
      env: XCODE="true"

  allow_failures:
    - os: osx

before_install:
  - echo $CC
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      eval "${MATRIX_EVAL}";
      if [ -n "$MATRIX_EVAL" ] && [ "$TRAVIS_COMPILER" != "clang" ] && [ "$CC" != "gcc-9" ] && [ "$CC" != "gcc-10" ]; then
        sudo apt-get install -y $CC;
      fi;
      if [ "$USE_VALGRIND" = "true" ]; then
        sudo apt-get install -y valgrind;
      fi;
    else
      brew install ncurses &&
      export PKG_CONFIG_PATH="/usr/local/opt/ncurses/lib/pkgconfig";
    fi

script:
  - if [ -n "$COVERITY_SCAN_TOKEN" ]; then
      exit 0;
    fi
  - mkdir build && cd build
  - ../configure ${CONFIGURE_OPTS}
  - if [ -z "$DISTCHECK_ONLY" ]; then
      make V=1 &&
      make check-selectrestore || exit $?;
      make V=1 check -j5 || exit $?;
      r=$?;
      if test "x$r" != x0; then
        cat test/test-suite.log;
      fi;
      exit $r;
    else
      make V=1 distcheck &&
      make distclean;
    fi
